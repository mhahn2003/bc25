package sprint;

import battlecode.common.*;

// Generated by scripts/generate_bellman_ford.py
public class BellmanFordNavigator extends Globals {

    private static int paintHeuristic(MapLocation location) throws GameActionException {
        PaintType p = rc.senseMapInfo(location).getPaint();
        if (p == PaintType.EMPTY) {
            return 2;
        }
        if (p.isAlly()) {
            return 1;
        }
        if (p.isEnemy()) {
            return 3;
        }
        return 0;
    }

    public static Direction getBestDirection(MapLocation target) throws GameActionException {
        MapLocation location1 = rc.adjacentLocation(Direction.WEST);
        boolean canVisit1 = rc.canMove(Direction.WEST);

        MapLocation location2 = rc.adjacentLocation(Direction.EAST);
        boolean canVisit2 = rc.canMove(Direction.EAST);

        MapLocation location3 = rc.adjacentLocation(Direction.SOUTH);
        boolean canVisit3 = rc.canMove(Direction.SOUTH);

        MapLocation location4 = rc.adjacentLocation(Direction.NORTH);
        boolean canVisit4 = rc.canMove(Direction.NORTH);

        MapLocation location5 = rc.adjacentLocation(Direction.SOUTHWEST);
        boolean canVisit5 = rc.canMove(Direction.SOUTHWEST);

        MapLocation location6 = rc.adjacentLocation(Direction.NORTHWEST);
        boolean canVisit6 = rc.canMove(Direction.NORTHWEST);

        MapLocation location7 = rc.adjacentLocation(Direction.SOUTHEAST);
        boolean canVisit7 = rc.canMove(Direction.SOUTHEAST);

        MapLocation location8 = rc.adjacentLocation(Direction.NORTHEAST);
        boolean canVisit8 = rc.canMove(Direction.NORTHEAST);

        if (canVisit1 && !canVisit2 && !canVisit3 && !canVisit4 && !canVisit5 && !canVisit6 && !canVisit7 && !canVisit8) {
            return Direction.WEST;
        }

        if (canVisit2 && !canVisit1 && !canVisit3 && !canVisit4 && !canVisit5 && !canVisit6 && !canVisit7 && !canVisit8) {
            return Direction.EAST;
        }

        if (canVisit3 && !canVisit1 && !canVisit2 && !canVisit4 && !canVisit5 && !canVisit6 && !canVisit7 && !canVisit8) {
            return Direction.SOUTH;
        }

        if (canVisit4 && !canVisit1 && !canVisit2 && !canVisit3 && !canVisit5 && !canVisit6 && !canVisit7 && !canVisit8) {
            return Direction.NORTH;
        }

        if (canVisit5 && !canVisit1 && !canVisit2 && !canVisit3 && !canVisit4 && !canVisit6 && !canVisit7 && !canVisit8) {
            return Direction.SOUTHWEST;
        }

        if (canVisit6 && !canVisit1 && !canVisit2 && !canVisit3 && !canVisit4 && !canVisit5 && !canVisit7 && !canVisit8) {
            return Direction.NORTHWEST;
        }

        if (canVisit7 && !canVisit1 && !canVisit2 && !canVisit3 && !canVisit4 && !canVisit5 && !canVisit6 && !canVisit8) {
            return Direction.SOUTHEAST;
        }

        if (canVisit8 && !canVisit1 && !canVisit2 && !canVisit3 && !canVisit4 && !canVisit5 && !canVisit6 && !canVisit7) {
            return Direction.NORTHEAST;
        }

        if (!canVisit1 && !canVisit2 && !canVisit3 && !canVisit4 && !canVisit5 && !canVisit6 && !canVisit7 && !canVisit8) {
            return null;
        }

        boolean checkOpponents = rc.senseNearbyRobots(GameConstants.VISION_RADIUS_SQUARED, opponentTeam).length > 0;

        int distance1 = 1_000_000;
        Direction direction1 = null;
        int weight1 = canVisit1 ? paintHeuristic(location1) + (checkOpponents ? rc.senseNearbyRobots(location1, 10, opponentTeam).length : 0) : 1_000_000;

        int distance2 = 1_000_000;
        Direction direction2 = null;
        int weight2 = canVisit2 ? paintHeuristic(location2) + (checkOpponents ? rc.senseNearbyRobots(location2, 10, opponentTeam).length : 0) : 1_000_000;

        int distance3 = 1_000_000;
        Direction direction3 = null;
        int weight3 = canVisit3 ? paintHeuristic(location3) + (checkOpponents ? rc.senseNearbyRobots(location3, 10, opponentTeam).length : 0) : 1_000_000;

        int distance4 = 1_000_000;
        Direction direction4 = null;
        int weight4 = canVisit4 ? paintHeuristic(location4) + (checkOpponents ? rc.senseNearbyRobots(location4, 10, opponentTeam).length : 0) : 1_000_000;

        int distance5 = 1_000_000;
        Direction direction5 = null;
        int weight5 = canVisit5 ? paintHeuristic(location5) + (checkOpponents ? rc.senseNearbyRobots(location5, 10, opponentTeam).length : 0) : 1_000_000;

        int distance6 = 1_000_000;
        Direction direction6 = null;
        int weight6 = canVisit6 ? paintHeuristic(location6) + (checkOpponents ? rc.senseNearbyRobots(location6, 10, opponentTeam).length : 0) : 1_000_000;

        int distance7 = 1_000_000;
        Direction direction7 = null;
        int weight7 = canVisit7 ? paintHeuristic(location7) + (checkOpponents ? rc.senseNearbyRobots(location7, 10, opponentTeam).length : 0) : 1_000_000;

        int distance8 = 1_000_000;
        Direction direction8 = null;
        int weight8 = canVisit8 ? paintHeuristic(location8) + (checkOpponents ? rc.senseNearbyRobots(location8, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location9 = location1.add(Direction.WEST);
        boolean canVisit9 = rc.canSenseLocation(location9) && rc.sensePassability(location9);
        int distance9 = 1_000_000;
        Direction direction9 = null;
        int weight9 = canVisit9 ? paintHeuristic(location9) + (checkOpponents ? rc.senseNearbyRobots(location9, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location12 = location2.add(Direction.EAST);
        boolean canVisit12 = rc.canSenseLocation(location12) && rc.sensePassability(location12);
        int distance12 = 1_000_000;
        Direction direction12 = null;
        int weight12 = canVisit12 ? paintHeuristic(location12) + (checkOpponents ? rc.senseNearbyRobots(location12, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location15 = location3.add(Direction.SOUTH);
        boolean canVisit15 = rc.canSenseLocation(location15) && rc.sensePassability(location15);
        int distance15 = 1_000_000;
        Direction direction15 = null;
        int weight15 = canVisit15 ? paintHeuristic(location15) + (checkOpponents ? rc.senseNearbyRobots(location15, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location18 = location4.add(Direction.NORTH);
        boolean canVisit18 = rc.canSenseLocation(location18) && rc.sensePassability(location18);
        int distance18 = 1_000_000;
        Direction direction18 = null;
        int weight18 = canVisit18 ? paintHeuristic(location18) + (checkOpponents ? rc.senseNearbyRobots(location18, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location10 = location1.add(Direction.SOUTHWEST);
        boolean canVisit10 = rc.canSenseLocation(location10) && rc.sensePassability(location10);
        int distance10 = 1_000_000;
        Direction direction10 = null;
        int weight10 = canVisit10 ? paintHeuristic(location10) + (checkOpponents ? rc.senseNearbyRobots(location10, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location11 = location1.add(Direction.NORTHWEST);
        boolean canVisit11 = rc.canSenseLocation(location11) && rc.sensePassability(location11);
        int distance11 = 1_000_000;
        Direction direction11 = null;
        int weight11 = canVisit11 ? paintHeuristic(location11) + (checkOpponents ? rc.senseNearbyRobots(location11, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location13 = location2.add(Direction.SOUTHEAST);
        boolean canVisit13 = rc.canSenseLocation(location13) && rc.sensePassability(location13);
        int distance13 = 1_000_000;
        Direction direction13 = null;
        int weight13 = canVisit13 ? paintHeuristic(location13) + (checkOpponents ? rc.senseNearbyRobots(location13, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location14 = location2.add(Direction.NORTHEAST);
        boolean canVisit14 = rc.canSenseLocation(location14) && rc.sensePassability(location14);
        int distance14 = 1_000_000;
        Direction direction14 = null;
        int weight14 = canVisit14 ? paintHeuristic(location14) + (checkOpponents ? rc.senseNearbyRobots(location14, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location16 = location3.add(Direction.SOUTHWEST);
        boolean canVisit16 = rc.canSenseLocation(location16) && rc.sensePassability(location16);
        int distance16 = 1_000_000;
        Direction direction16 = null;
        int weight16 = canVisit16 ? paintHeuristic(location16) + (checkOpponents ? rc.senseNearbyRobots(location16, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location17 = location3.add(Direction.SOUTHEAST);
        boolean canVisit17 = rc.canSenseLocation(location17) && rc.sensePassability(location17);
        int distance17 = 1_000_000;
        Direction direction17 = null;
        int weight17 = canVisit17 ? paintHeuristic(location17) + (checkOpponents ? rc.senseNearbyRobots(location17, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location19 = location4.add(Direction.NORTHWEST);
        boolean canVisit19 = rc.canSenseLocation(location19) && rc.sensePassability(location19);
        int distance19 = 1_000_000;
        Direction direction19 = null;
        int weight19 = canVisit19 ? paintHeuristic(location19) + (checkOpponents ? rc.senseNearbyRobots(location19, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location20 = location4.add(Direction.NORTHEAST);
        boolean canVisit20 = rc.canSenseLocation(location20) && rc.sensePassability(location20);
        int distance20 = 1_000_000;
        Direction direction20 = null;
        int weight20 = canVisit20 ? paintHeuristic(location20) + (checkOpponents ? rc.senseNearbyRobots(location20, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location21 = location5.add(Direction.SOUTHWEST);
        boolean canVisit21 = rc.canSenseLocation(location21) && rc.sensePassability(location21);
        int distance21 = 1_000_000;
        Direction direction21 = null;
        int weight21 = canVisit21 ? paintHeuristic(location21) + (checkOpponents ? rc.senseNearbyRobots(location21, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location22 = location6.add(Direction.NORTHWEST);
        boolean canVisit22 = rc.canSenseLocation(location22) && rc.sensePassability(location22);
        int distance22 = 1_000_000;
        Direction direction22 = null;
        int weight22 = canVisit22 ? paintHeuristic(location22) + (checkOpponents ? rc.senseNearbyRobots(location22, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location23 = location7.add(Direction.SOUTHEAST);
        boolean canVisit23 = rc.canSenseLocation(location23) && rc.sensePassability(location23);
        int distance23 = 1_000_000;
        Direction direction23 = null;
        int weight23 = canVisit23 ? paintHeuristic(location23) + (checkOpponents ? rc.senseNearbyRobots(location23, 10, opponentTeam).length : 0) : 1_000_000;

        MapLocation location24 = location8.add(Direction.NORTHEAST);
        boolean canVisit24 = rc.canSenseLocation(location24) && rc.sensePassability(location24);
        int distance24 = 1_000_000;
        Direction direction24 = null;
        int weight24 = canVisit24 ? paintHeuristic(location24) + (checkOpponents ? rc.senseNearbyRobots(location24, 10, opponentTeam).length : 0) : 1_000_000;

        if (canVisit1) {
            distance1 = weight1;
            direction1 = Direction.WEST;
        }

        if (canVisit2) {
            distance2 = weight2;
            direction2 = Direction.EAST;
        }

        if (canVisit3) {
            distance3 = weight3;
            direction3 = Direction.SOUTH;
        }

        if (canVisit4) {
            distance4 = weight4;
            direction4 = Direction.NORTH;
        }

        if (canVisit5) {
            distance5 = weight5;
            direction5 = Direction.SOUTHWEST;
        }

        if (canVisit6) {
            distance6 = weight6;
            direction6 = Direction.NORTHWEST;
        }

        if (canVisit7) {
            distance7 = weight7;
            direction7 = Direction.SOUTHEAST;
        }

        if (canVisit8) {
            distance8 = weight8;
            direction8 = Direction.NORTHEAST;
        }

        if (canVisit9) {
            if (distance1 + weight9 < distance9) {
                distance9 = distance1 + weight9;
                direction9 = direction1;
            }

            if (distance5 + weight9 < distance9) {
                distance9 = distance5 + weight9;
                direction9 = direction5;
            }

            if (distance6 + weight9 < distance9) {
                distance9 = distance6 + weight9;
                direction9 = direction6;
            }
        }

        if (canVisit12) {
            if (distance2 + weight12 < distance12) {
                distance12 = distance2 + weight12;
                direction12 = direction2;
            }

            if (distance7 + weight12 < distance12) {
                distance12 = distance7 + weight12;
                direction12 = direction7;
            }

            if (distance8 + weight12 < distance12) {
                distance12 = distance8 + weight12;
                direction12 = direction8;
            }
        }

        if (canVisit15) {
            if (distance3 + weight15 < distance15) {
                distance15 = distance3 + weight15;
                direction15 = direction3;
            }

            if (distance5 + weight15 < distance15) {
                distance15 = distance5 + weight15;
                direction15 = direction5;
            }

            if (distance7 + weight15 < distance15) {
                distance15 = distance7 + weight15;
                direction15 = direction7;
            }
        }

        if (canVisit18) {
            if (distance4 + weight18 < distance18) {
                distance18 = distance4 + weight18;
                direction18 = direction4;
            }

            if (distance6 + weight18 < distance18) {
                distance18 = distance6 + weight18;
                direction18 = direction6;
            }

            if (distance8 + weight18 < distance18) {
                distance18 = distance8 + weight18;
                direction18 = direction8;
            }
        }

        if (canVisit10) {
            if (distance5 + weight10 < distance10) {
                distance10 = distance5 + weight10;
                direction10 = direction5;
            }

            if (distance9 + weight10 < distance10) {
                distance10 = distance9 + weight10;
                direction10 = direction9;
            }

            if (distance1 + weight10 < distance10) {
                distance10 = distance1 + weight10;
                direction10 = direction1;
            }
        }

        if (canVisit11) {
            if (distance6 + weight11 < distance11) {
                distance11 = distance6 + weight11;
                direction11 = direction6;
            }

            if (distance9 + weight11 < distance11) {
                distance11 = distance9 + weight11;
                direction11 = direction9;
            }

            if (distance1 + weight11 < distance11) {
                distance11 = distance1 + weight11;
                direction11 = direction1;
            }
        }

        if (canVisit13) {
            if (distance7 + weight13 < distance13) {
                distance13 = distance7 + weight13;
                direction13 = direction7;
            }

            if (distance12 + weight13 < distance13) {
                distance13 = distance12 + weight13;
                direction13 = direction12;
            }

            if (distance2 + weight13 < distance13) {
                distance13 = distance2 + weight13;
                direction13 = direction2;
            }
        }

        if (canVisit14) {
            if (distance8 + weight14 < distance14) {
                distance14 = distance8 + weight14;
                direction14 = direction8;
            }

            if (distance12 + weight14 < distance14) {
                distance14 = distance12 + weight14;
                direction14 = direction12;
            }

            if (distance2 + weight14 < distance14) {
                distance14 = distance2 + weight14;
                direction14 = direction2;
            }
        }

        if (canVisit16) {
            if (distance15 + weight16 < distance16) {
                distance16 = distance15 + weight16;
                direction16 = direction15;
            }

            if (distance5 + weight16 < distance16) {
                distance16 = distance5 + weight16;
                direction16 = direction5;
            }

            if (distance3 + weight16 < distance16) {
                distance16 = distance3 + weight16;
                direction16 = direction3;
            }
        }

        if (canVisit17) {
            if (distance15 + weight17 < distance17) {
                distance17 = distance15 + weight17;
                direction17 = direction15;
            }

            if (distance7 + weight17 < distance17) {
                distance17 = distance7 + weight17;
                direction17 = direction7;
            }

            if (distance3 + weight17 < distance17) {
                distance17 = distance3 + weight17;
                direction17 = direction3;
            }
        }

        if (canVisit19) {
            if (distance18 + weight19 < distance19) {
                distance19 = distance18 + weight19;
                direction19 = direction18;
            }

            if (distance6 + weight19 < distance19) {
                distance19 = distance6 + weight19;
                direction19 = direction6;
            }

            if (distance4 + weight19 < distance19) {
                distance19 = distance4 + weight19;
                direction19 = direction4;
            }
        }

        if (canVisit20) {
            if (distance18 + weight20 < distance20) {
                distance20 = distance18 + weight20;
                direction20 = direction18;
            }

            if (distance8 + weight20 < distance20) {
                distance20 = distance8 + weight20;
                direction20 = direction8;
            }

            if (distance4 + weight20 < distance20) {
                distance20 = distance4 + weight20;
                direction20 = direction4;
            }
        }

        if (canVisit21) {
            if (distance16 + weight21 < distance21) {
                distance21 = distance16 + weight21;
                direction21 = direction16;
            }

            if (distance10 + weight21 < distance21) {
                distance21 = distance10 + weight21;
                direction21 = direction10;
            }

            if (distance5 + weight21 < distance21) {
                distance21 = distance5 + weight21;
                direction21 = direction5;
            }
        }

        if (canVisit22) {
            if (distance19 + weight22 < distance22) {
                distance22 = distance19 + weight22;
                direction22 = direction19;
            }

            if (distance11 + weight22 < distance22) {
                distance22 = distance11 + weight22;
                direction22 = direction11;
            }

            if (distance6 + weight22 < distance22) {
                distance22 = distance6 + weight22;
                direction22 = direction6;
            }
        }

        if (canVisit23) {
            if (distance17 + weight23 < distance23) {
                distance23 = distance17 + weight23;
                direction23 = direction17;
            }

            if (distance13 + weight23 < distance23) {
                distance23 = distance13 + weight23;
                direction23 = direction13;
            }

            if (distance7 + weight23 < distance23) {
                distance23 = distance7 + weight23;
                direction23 = direction7;
            }
        }

        if (canVisit24) {
            if (distance20 + weight24 < distance24) {
                distance24 = distance20 + weight24;
                direction24 = direction20;
            }

            if (distance14 + weight24 < distance24) {
                distance24 = distance14 + weight24;
                direction24 = direction14;
            }

            if (distance8 + weight24 < distance24) {
                distance24 = distance8 + weight24;
                direction24 = direction8;
            }
        }

        if (canVisit8) {
            if (distance14 + weight8 < distance8) {
                distance8 = distance14 + weight8;
                direction8 = direction14;
            }

            if (distance20 + weight8 < distance8) {
                distance8 = distance20 + weight8;
                direction8 = direction20;
            }

            if (distance18 + weight8 < distance8) {
                distance8 = distance18 + weight8;
                direction8 = direction18;
            }

            if (distance12 + weight8 < distance8) {
                distance8 = distance12 + weight8;
                direction8 = direction12;
            }

            if (distance24 + weight8 < distance8) {
                distance8 = distance24 + weight8;
                direction8 = direction24;
            }
        }

        if (canVisit7) {
            if (distance13 + weight7 < distance7) {
                distance7 = distance13 + weight7;
                direction7 = direction13;
            }

            if (distance17 + weight7 < distance7) {
                distance7 = distance17 + weight7;
                direction7 = direction17;
            }

            if (distance15 + weight7 < distance7) {
                distance7 = distance15 + weight7;
                direction7 = direction15;
            }

            if (distance23 + weight7 < distance7) {
                distance7 = distance23 + weight7;
                direction7 = direction23;
            }

            if (distance12 + weight7 < distance7) {
                distance7 = distance12 + weight7;
                direction7 = direction12;
            }
        }

        if (canVisit6) {
            if (distance11 + weight6 < distance6) {
                distance6 = distance11 + weight6;
                direction6 = direction11;
            }

            if (distance19 + weight6 < distance6) {
                distance6 = distance19 + weight6;
                direction6 = direction19;
            }

            if (distance9 + weight6 < distance6) {
                distance6 = distance9 + weight6;
                direction6 = direction9;
            }

            if (distance22 + weight6 < distance6) {
                distance6 = distance22 + weight6;
                direction6 = direction22;
            }

            if (distance18 + weight6 < distance6) {
                distance6 = distance18 + weight6;
                direction6 = direction18;
            }
        }

        if (canVisit5) {
            if (distance10 + weight5 < distance5) {
                distance5 = distance10 + weight5;
                direction5 = direction10;
            }

            if (distance16 + weight5 < distance5) {
                distance5 = distance16 + weight5;
                direction5 = direction16;
            }

            if (distance21 + weight5 < distance5) {
                distance5 = distance21 + weight5;
                direction5 = direction21;
            }

            if (distance9 + weight5 < distance5) {
                distance5 = distance9 + weight5;
                direction5 = direction9;
            }

            if (distance15 + weight5 < distance5) {
                distance5 = distance15 + weight5;
                direction5 = direction15;
            }
        }

        if (canVisit4) {
            if (distance6 + weight4 < distance4) {
                distance4 = distance6 + weight4;
                direction4 = direction6;
            }

            if (distance8 + weight4 < distance4) {
                distance4 = distance8 + weight4;
                direction4 = direction8;
            }

            if (distance18 + weight4 < distance4) {
                distance4 = distance18 + weight4;
                direction4 = direction18;
            }

            if (distance1 + weight4 < distance4) {
                distance4 = distance1 + weight4;
                direction4 = direction1;
            }

            if (distance19 + weight4 < distance4) {
                distance4 = distance19 + weight4;
                direction4 = direction19;
            }

            if (distance2 + weight4 < distance4) {
                distance4 = distance2 + weight4;
                direction4 = direction2;
            }

            if (distance20 + weight4 < distance4) {
                distance4 = distance20 + weight4;
                direction4 = direction20;
            }
        }

        if (canVisit3) {
            if (distance5 + weight3 < distance3) {
                distance3 = distance5 + weight3;
                direction3 = direction5;
            }

            if (distance7 + weight3 < distance3) {
                distance3 = distance7 + weight3;
                direction3 = direction7;
            }

            if (distance15 + weight3 < distance3) {
                distance3 = distance15 + weight3;
                direction3 = direction15;
            }

            if (distance16 + weight3 < distance3) {
                distance3 = distance16 + weight3;
                direction3 = direction16;
            }

            if (distance1 + weight3 < distance3) {
                distance3 = distance1 + weight3;
                direction3 = direction1;
            }

            if (distance17 + weight3 < distance3) {
                distance3 = distance17 + weight3;
                direction3 = direction17;
            }

            if (distance2 + weight3 < distance3) {
                distance3 = distance2 + weight3;
                direction3 = direction2;
            }
        }

        if (canVisit2) {
            if (distance12 + weight2 < distance2) {
                distance2 = distance12 + weight2;
                direction2 = direction12;
            }

            if (distance7 + weight2 < distance2) {
                distance2 = distance7 + weight2;
                direction2 = direction7;
            }

            if (distance8 + weight2 < distance2) {
                distance2 = distance8 + weight2;
                direction2 = direction8;
            }

            if (distance3 + weight2 < distance2) {
                distance2 = distance3 + weight2;
                direction2 = direction3;
            }

            if (distance4 + weight2 < distance2) {
                distance2 = distance4 + weight2;
                direction2 = direction4;
            }

            if (distance13 + weight2 < distance2) {
                distance2 = distance13 + weight2;
                direction2 = direction13;
            }

            if (distance14 + weight2 < distance2) {
                distance2 = distance14 + weight2;
                direction2 = direction14;
            }
        }

        if (canVisit1) {
            if (distance9 + weight1 < distance1) {
                distance1 = distance9 + weight1;
                direction1 = direction9;
            }

            if (distance5 + weight1 < distance1) {
                distance1 = distance5 + weight1;
                direction1 = direction5;
            }

            if (distance6 + weight1 < distance1) {
                distance1 = distance6 + weight1;
                direction1 = direction6;
            }

            if (distance10 + weight1 < distance1) {
                distance1 = distance10 + weight1;
                direction1 = direction10;
            }

            if (distance11 + weight1 < distance1) {
                distance1 = distance11 + weight1;
                direction1 = direction11;
            }

            if (distance3 + weight1 < distance1) {
                distance1 = distance3 + weight1;
                direction1 = direction3;
            }

            if (distance4 + weight1 < distance1) {
                distance1 = distance4 + weight1;
                direction1 = direction4;
            }
        }

        if (canVisit5) {
            if (distance3 + weight5 < distance5) {
                distance5 = distance3 + weight5;
                direction5 = direction3;
            }

            if (distance1 + weight5 < distance5) {
                distance5 = distance1 + weight5;
                direction5 = direction1;
            }
        }

        if (canVisit6) {
            if (distance4 + weight6 < distance6) {
                distance6 = distance4 + weight6;
                direction6 = direction4;
            }

            if (distance1 + weight6 < distance6) {
                distance6 = distance1 + weight6;
                direction6 = direction1;
            }
        }

        if (canVisit7) {
            if (distance3 + weight7 < distance7) {
                distance7 = distance3 + weight7;
                direction7 = direction3;
            }

            if (distance2 + weight7 < distance7) {
                distance7 = distance2 + weight7;
                direction7 = direction2;
            }
        }

        if (canVisit8) {
            if (distance4 + weight8 < distance8) {
                distance8 = distance4 + weight8;
                direction8 = direction4;
            }

            if (distance2 + weight8 < distance8) {
                distance8 = distance2 + weight8;
                direction8 = direction2;
            }
        }

        if (canVisit9) {
            if (distance1 + weight9 < distance9) {
                distance9 = distance1 + weight9;
                direction9 = direction1;
            }

            if (distance5 + weight9 < distance9) {
                distance9 = distance5 + weight9;
                direction9 = direction5;
            }

            if (distance6 + weight9 < distance9) {
                distance9 = distance6 + weight9;
                direction9 = direction6;
            }
        }

        if (canVisit12) {
            if (distance2 + weight12 < distance12) {
                distance12 = distance2 + weight12;
                direction12 = direction2;
            }

            if (distance7 + weight12 < distance12) {
                distance12 = distance7 + weight12;
                direction12 = direction7;
            }

            if (distance8 + weight12 < distance12) {
                distance12 = distance8 + weight12;
                direction12 = direction8;
            }
        }

        if (canVisit15) {
            if (distance3 + weight15 < distance15) {
                distance15 = distance3 + weight15;
                direction15 = direction3;
            }

            if (distance5 + weight15 < distance15) {
                distance15 = distance5 + weight15;
                direction15 = direction5;
            }

            if (distance7 + weight15 < distance15) {
                distance15 = distance7 + weight15;
                direction15 = direction7;
            }
        }

        if (canVisit18) {
            if (distance4 + weight18 < distance18) {
                distance18 = distance4 + weight18;
                direction18 = direction4;
            }

            if (distance6 + weight18 < distance18) {
                distance18 = distance6 + weight18;
                direction18 = direction6;
            }

            if (distance8 + weight18 < distance18) {
                distance18 = distance8 + weight18;
                direction18 = direction8;
            }
        }

        if (canVisit10) {
            if (distance5 + weight10 < distance10) {
                distance10 = distance5 + weight10;
                direction10 = direction5;
            }

            if (distance9 + weight10 < distance10) {
                distance10 = distance9 + weight10;
                direction10 = direction9;
            }

            if (distance1 + weight10 < distance10) {
                distance10 = distance1 + weight10;
                direction10 = direction1;
            }
        }

        if (canVisit11) {
            if (distance6 + weight11 < distance11) {
                distance11 = distance6 + weight11;
                direction11 = direction6;
            }

            if (distance9 + weight11 < distance11) {
                distance11 = distance9 + weight11;
                direction11 = direction9;
            }

            if (distance1 + weight11 < distance11) {
                distance11 = distance1 + weight11;
                direction11 = direction1;
            }
        }

        if (canVisit13) {
            if (distance7 + weight13 < distance13) {
                distance13 = distance7 + weight13;
                direction13 = direction7;
            }

            if (distance12 + weight13 < distance13) {
                distance13 = distance12 + weight13;
                direction13 = direction12;
            }

            if (distance2 + weight13 < distance13) {
                distance13 = distance2 + weight13;
                direction13 = direction2;
            }
        }

        if (canVisit14) {
            if (distance8 + weight14 < distance14) {
                distance14 = distance8 + weight14;
                direction14 = direction8;
            }

            if (distance12 + weight14 < distance14) {
                distance14 = distance12 + weight14;
                direction14 = direction12;
            }

            if (distance2 + weight14 < distance14) {
                distance14 = distance2 + weight14;
                direction14 = direction2;
            }
        }

        if (canVisit16) {
            if (distance15 + weight16 < distance16) {
                distance16 = distance15 + weight16;
                direction16 = direction15;
            }

            if (distance5 + weight16 < distance16) {
                distance16 = distance5 + weight16;
                direction16 = direction5;
            }

            if (distance3 + weight16 < distance16) {
                distance16 = distance3 + weight16;
                direction16 = direction3;
            }
        }

        if (canVisit17) {
            if (distance15 + weight17 < distance17) {
                distance17 = distance15 + weight17;
                direction17 = direction15;
            }

            if (distance7 + weight17 < distance17) {
                distance17 = distance7 + weight17;
                direction17 = direction7;
            }

            if (distance3 + weight17 < distance17) {
                distance17 = distance3 + weight17;
                direction17 = direction3;
            }
        }

        if (canVisit19) {
            if (distance18 + weight19 < distance19) {
                distance19 = distance18 + weight19;
                direction19 = direction18;
            }

            if (distance6 + weight19 < distance19) {
                distance19 = distance6 + weight19;
                direction19 = direction6;
            }

            if (distance4 + weight19 < distance19) {
                distance19 = distance4 + weight19;
                direction19 = direction4;
            }
        }

        if (canVisit20) {
            if (distance18 + weight20 < distance20) {
                distance20 = distance18 + weight20;
                direction20 = direction18;
            }

            if (distance8 + weight20 < distance20) {
                distance20 = distance8 + weight20;
                direction20 = direction8;
            }

            if (distance4 + weight20 < distance20) {
                distance20 = distance4 + weight20;
                direction20 = direction4;
            }
        }

        if (canVisit21) {
            if (distance16 + weight21 < distance21) {
                distance21 = distance16 + weight21;
                direction21 = direction16;
            }

            if (distance10 + weight21 < distance21) {
                distance21 = distance10 + weight21;
                direction21 = direction10;
            }

            if (distance5 + weight21 < distance21) {
                distance21 = distance5 + weight21;
                direction21 = direction5;
            }
        }

        if (canVisit22) {
            if (distance19 + weight22 < distance22) {
                distance22 = distance19 + weight22;
                direction22 = direction19;
            }

            if (distance11 + weight22 < distance22) {
                distance22 = distance11 + weight22;
                direction22 = direction11;
            }

            if (distance6 + weight22 < distance22) {
                distance22 = distance6 + weight22;
                direction22 = direction6;
            }
        }

        if (canVisit23) {
            if (distance17 + weight23 < distance23) {
                distance23 = distance17 + weight23;
                direction23 = direction17;
            }

            if (distance13 + weight23 < distance23) {
                distance23 = distance13 + weight23;
                direction23 = direction13;
            }

            if (distance7 + weight23 < distance23) {
                distance23 = distance7 + weight23;
                direction23 = direction7;
            }
        }

        if (canVisit24) {
            if (distance20 + weight24 < distance24) {
                distance24 = distance20 + weight24;
                direction24 = direction20;
            }

            if (distance14 + weight24 < distance24) {
                distance24 = distance14 + weight24;
                direction24 = direction14;
            }

            if (distance8 + weight24 < distance24) {
                distance24 = distance8 + weight24;
                direction24 = direction8;
            }
        }

        Direction bestDirection = null;
        double maxScore = 0;
        int currentDistance = rc.getLocation().distanceSquaredTo(target);

        double score1 = (double) (currentDistance - location1.distanceSquaredTo(target)) / (double) distance1;
        if (score1 > maxScore) {
            bestDirection = direction1;
            maxScore = score1;
        }

        double score2 = (double) (currentDistance - location2.distanceSquaredTo(target)) / (double) distance2;
        if (score2 > maxScore) {
            bestDirection = direction2;
            maxScore = score2;
        }

        double score3 = (double) (currentDistance - location3.distanceSquaredTo(target)) / (double) distance3;
        if (score3 > maxScore) {
            bestDirection = direction3;
            maxScore = score3;
        }

        double score4 = (double) (currentDistance - location4.distanceSquaredTo(target)) / (double) distance4;
        if (score4 > maxScore) {
            bestDirection = direction4;
            maxScore = score4;
        }

        double score5 = (double) (currentDistance - location5.distanceSquaredTo(target)) / (double) distance5;
        if (score5 > maxScore) {
            bestDirection = direction5;
            maxScore = score5;
        }

        double score6 = (double) (currentDistance - location6.distanceSquaredTo(target)) / (double) distance6;
        if (score6 > maxScore) {
            bestDirection = direction6;
            maxScore = score6;
        }

        double score7 = (double) (currentDistance - location7.distanceSquaredTo(target)) / (double) distance7;
        if (score7 > maxScore) {
            bestDirection = direction7;
            maxScore = score7;
        }

        double score8 = (double) (currentDistance - location8.distanceSquaredTo(target)) / (double) distance8;
        if (score8 > maxScore) {
            bestDirection = direction8;
            maxScore = score8;
        }

        double score9 = (double) (currentDistance - location9.distanceSquaredTo(target)) / (double) distance9;
        if (score9 > maxScore) {
            bestDirection = direction9;
            maxScore = score9;
        }

        double score10 = (double) (currentDistance - location10.distanceSquaredTo(target)) / (double) distance10;
        if (score10 > maxScore) {
            bestDirection = direction10;
            maxScore = score10;
        }

        double score11 = (double) (currentDistance - location11.distanceSquaredTo(target)) / (double) distance11;
        if (score11 > maxScore) {
            bestDirection = direction11;
            maxScore = score11;
        }

        double score12 = (double) (currentDistance - location12.distanceSquaredTo(target)) / (double) distance12;
        if (score12 > maxScore) {
            bestDirection = direction12;
            maxScore = score12;
        }

        double score13 = (double) (currentDistance - location13.distanceSquaredTo(target)) / (double) distance13;
        if (score13 > maxScore) {
            bestDirection = direction13;
            maxScore = score13;
        }

        double score14 = (double) (currentDistance - location14.distanceSquaredTo(target)) / (double) distance14;
        if (score14 > maxScore) {
            bestDirection = direction14;
            maxScore = score14;
        }

        double score15 = (double) (currentDistance - location15.distanceSquaredTo(target)) / (double) distance15;
        if (score15 > maxScore) {
            bestDirection = direction15;
            maxScore = score15;
        }

        double score16 = (double) (currentDistance - location16.distanceSquaredTo(target)) / (double) distance16;
        if (score16 > maxScore) {
            bestDirection = direction16;
            maxScore = score16;
        }

        double score17 = (double) (currentDistance - location17.distanceSquaredTo(target)) / (double) distance17;
        if (score17 > maxScore) {
            bestDirection = direction17;
            maxScore = score17;
        }

        double score18 = (double) (currentDistance - location18.distanceSquaredTo(target)) / (double) distance18;
        if (score18 > maxScore) {
            bestDirection = direction18;
            maxScore = score18;
        }

        double score19 = (double) (currentDistance - location19.distanceSquaredTo(target)) / (double) distance19;
        if (score19 > maxScore) {
            bestDirection = direction19;
            maxScore = score19;
        }

        double score20 = (double) (currentDistance - location20.distanceSquaredTo(target)) / (double) distance20;
        if (score20 > maxScore) {
            bestDirection = direction20;
            maxScore = score20;
        }

        double score21 = (double) (currentDistance - location21.distanceSquaredTo(target)) / (double) distance21;
        if (score21 > maxScore) {
            bestDirection = direction21;
            maxScore = score21;
        }

        double score22 = (double) (currentDistance - location22.distanceSquaredTo(target)) / (double) distance22;
        if (score22 > maxScore) {
            bestDirection = direction22;
            maxScore = score22;
        }

        double score23 = (double) (currentDistance - location23.distanceSquaredTo(target)) / (double) distance23;
        if (score23 > maxScore) {
            bestDirection = direction23;
            maxScore = score23;
        }

        double score24 = (double) (currentDistance - location24.distanceSquaredTo(target)) / (double) distance24;
        if (score24 > maxScore) {
            bestDirection = direction24;
            maxScore = score24;
        }

        return bestDirection;
    }
}